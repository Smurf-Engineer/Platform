#!/usr/bin/env bun
// @ts-

import fs from "fs";
import path from "path";
import prettier from "prettier";
import { RoutePage, RouteType, getRouteDetails } from "./routeDetails";
import {
  autoGeneratedBannerCode,
  createBrowserRouterCode,
  errorPageCode,
  importCode,
  layoutPageCode,
  lazyLoadingPageCode,
  normalPageCode,
} from "./pageCode";

const sourceRoot = fs.existsSync(path.join(process.cwd(), "src")) ? path.join(process.cwd(), "src") : process.cwd();
const outputPath = path.join(sourceRoot, "lib", "router", "router.generated.ts");
const appPath = path.join(sourceRoot, "app");
const importPrefix = "@";

if (!fs.existsSync(appPath)) {
  throw new Error(`Could not find app directory at ${appPath}`);
}

type TemplateObject = Record<string, string>;

function generateReactRouterCode(routeItem: RouteType): string {
  if (routeItem.type === "page") {
    if (routeItem.loadingPage) {
      const landingRoutePage: RoutePage = { ...routeItem, page: routeItem.loadingPage };
      return `{
        index: true,
        element: ${lazyLoadingPageCode(routeItem, landingRoutePage)},
      }`;
    }
    return `{
      index: true,
      element: ${normalPageCode(routeItem)},
    }`;
  }
  if (routeItem.type === "not-found") {
    return `{
      path: "*",
      element: ${normalPageCode(routeItem)},
    }`;
  }

  if (routeItem.type === "entry") {
    const result: TemplateObject = {};

    if (routeItem.layout != null) {
      result.element = layoutPageCode(routeItem.layout);
    }

    if (routeItem.error != null) {
      result.errorElement = errorPageCode(routeItem.error);
    }

    if (routeItem.children.length > 0) {
      result.children = `[${routeItem.children.map((c) => generateReactRouterCode(c)).join(",\n")}]`;
    }

    return routeItem.aliases
      .map((alias) =>
        serializeTemplateObject({
          path: `"${alias}"`,
          ...result,
        })
      )
      .join(",\n");
  }

  throw new Error(`Unhandled route type ${routeItem.type}`);
}

const route = getRouteDetails([""], { appPath, importPrefix });
const code = `${autoGeneratedBannerCode()}
              ${importCode()}
              ${createBrowserRouterCode(generateReactRouterCode(route))}
              `;

try {
  const routerFileContents = await prettier.format(code, {
    parser: "typescript",
  });
  fs.writeFileSync(outputPath, routerFileContents, "utf-8");
  console.log("Routes generated successfully!");
} catch (error) {
  console.error(error);
  console.log(code);
  process.exit(1);
}

function serializeTemplateObject(object: TemplateObject) {
  return Object.entries(object).reduce((result, [key, value]) => `${result}${key}: ${value},\n`, "{\n") + "}";
}
